# Generated by roxygen2: do not edit by hand

export(break.group.by.GEBV)
export(break.group.by.label.range)
export(break.group.by.label.value)
export(break.group.evenly)
export(break.group.into.buckets)
export(break.group.into.families)
export(break.group.into.halfsib.families)
export(break.group.into.individuals)
export(break.group.randomly)
export(break.group.with.probabilities)
export(change.allele.symbol)
export(change.label.by.amount)
export(change.label.default)
export(change.label.to.this)
export(change.label.to.values)
export(change.names.to.values)
export(clear.simdata)
export(combine.groups)
export(create.new.label)
export(cross.all.pairs)
export(cross.combinations)
export(cross.combinations.file)
export(cross.dc.combinations.file)
export(cross.randomly)
export(cross.randomly.between)
export(define.matrix.format.details)
export(delete.effect.set)
export(delete.group)
export(delete.label)
export(delete.recombination.map)
export(find.crossovers)
export(find.plot.crossovers)
export(load.data)
export(load.different.effects)
export(load.effects)
export(load.genotypes)
export(load.map)
export(load.more.genotypes)
export(make.all.unidirectional.crosses)
export(make.clones)
export(make.crosses.from.file)
export(make.double.crosses.from.file)
export(make.doubled.haploids)
export(make.group)
export(make.group.from.label)
export(make.group.from.label.range)
export(make.label)
export(make.random.crosses)
export(make.random.crosses.between)
export(make.targeted.crosses)
export(save.GEBVs)
export(save.allele.counts)
export(save.genome.model)
export(save.genotypes)
export(save.local.GEBVs.blocks.from.chrsplit)
export(save.local.GEBVs.blocks.from.file)
export(save.local.GEBVs.by.chr)
export(save.local.GEBVs.by.file)
export(save.pedigrees)
export(see.existing.groups)
export(see.group.data)
export(see.group.gene.data)
export(see.minimal.GEBV)
export(see.minimum.GEBV)
export(see.optimal.GEBV)
export(see.optimal.haplotype)
export(see.optimal.possible.GEBV)
export(see.optimal.possible.haplotype)
export(select.by.gebv)
export(self.n.times)
useDynLib(genomicSimulation, .registration = TRUE)
